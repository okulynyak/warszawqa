/* THIS FILE IS AUTOGENERATED FROM FakePluginTagInit.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_FakePluginTagInitBinding_h
#define mozilla_dom_FakePluginTagInitBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct FakePluginMimeEntry;
struct FakePluginMimeEntryAtoms;
struct FakePluginTagInitAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct FakePluginMimeEntry : public DictionaryBase
{
  nsString mDescription;
  nsString mExtension;
  nsString mType;

  FakePluginMimeEntry();

  explicit inline FakePluginMimeEntry(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline FakePluginMimeEntry(const FakePluginMimeEntry& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const FakePluginMimeEntry& aOther);

private:
  static bool
  InitIds(JSContext* cx, FakePluginMimeEntryAtoms* atomsCache);
};

namespace binding_detail {
struct FastFakePluginMimeEntry : public FakePluginMimeEntry
{
  inline FastFakePluginMimeEntry()
    : FakePluginMimeEntry(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct FakePluginTagInit : public DictionaryBase
{
  nsString mDescription;
  nsString mFileName;
  nsString mFullPath;
  nsString mHandlerURI;
  Sequence<FakePluginMimeEntry> mMimeEntries;
  nsString mName;
  nsString mNiceName;
  nsString mVersion;

  FakePluginTagInit();

  explicit inline FakePluginTagInit(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline FakePluginTagInit(const FakePluginTagInit& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const FakePluginTagInit& aOther);

private:
  static bool
  InitIds(JSContext* cx, FakePluginTagInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastFakePluginTagInit : public FakePluginTagInit
{
  inline FastFakePluginTagInit()
    : FakePluginTagInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_FakePluginTagInitBinding_h
