/* THIS FILE IS AUTOGENERATED FROM External.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_ExternalBinding_h
#define mozilla_dom_ExternalBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/ToJSValue.h"
#include "nsWeakReference.h"

namespace mozilla {
namespace dom {

class External;
struct ExternalAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

namespace ExternalBinding {

  typedef mozilla::dom::External NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::External* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace ExternalBinding



class ExternalJSImpl : public CallbackInterface
{
public:
  explicit inline ExternalJSImpl(JSContext* aCx, JS::Handle<JSObject*> aCallback, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCx, aCallback, aIncumbentGlobal)
  {
  }

  void AddSearchProvider(const nsAString& aDescriptionURL, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  uint32_t IsSearchProviderInstalled(const nsAString& aSearchURL, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void AddSearchEngine(const nsAString& engineURL, const nsAString& iconURL, const nsAString& suggestedTitle, const nsAString& suggestedCategory, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  inline bool
  operator==(const ExternalJSImpl& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

private:
  static bool
  InitIds(JSContext* cx, ExternalAtoms* atomsCache);
};


class External final : public nsSupportsWeakReference,
                       public nsWrapperCache
{
public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(External)

private:
  RefPtr<ExternalJSImpl> mImpl;
  nsCOMPtr<nsISupports> mParent;

public:
  External(JS::Handle<JSObject*> aJSImplObject, nsIGlobalObject* aParent);

private:
  ~External();

public:
  nsISupports* GetParentObject() const;

  virtual JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;

  void AddSearchProvider(const nsAString& aDescriptionURL, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  uint32_t IsSearchProviderInstalled(const nsAString& aSearchURL, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void AddSearchEngine(const nsAString& engineURL, const nsAString& iconURL, const nsAString& suggestedTitle, const nsAString& suggestedCategory, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  static bool
  _Create(JSContext* cx, unsigned argc, JS::Value* vp);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_ExternalBinding_h
