/* THIS FILE IS AUTOGENERATED FROM BrowserElement.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_BrowserElementBinding_h
#define mozilla_dom_BrowserElementBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackFunction.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/ToJSValue.h"

namespace mozilla {
namespace dom {

struct BrowserElementDownloadOptionsAtoms;
struct BrowserElementExecuteScriptOptionsAtoms;
class BrowserElementNextPaintEventCallback;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class BrowserFindCaseSensitivity : uint32_t {
  Case_sensitive,
  Case_insensitive,
  EndGuard_
};

namespace BrowserFindCaseSensitivityValues {
extern const EnumEntry strings[3];
} // namespace BrowserFindCaseSensitivityValues

bool
ToJSValue(JSContext* aCx, BrowserFindCaseSensitivity aArgument, JS::MutableHandle<JS::Value> aValue);


enum class BrowserFindDirection : uint32_t {
  Forward,
  Backward,
  EndGuard_
};

namespace BrowserFindDirectionValues {
extern const EnumEntry strings[3];
} // namespace BrowserFindDirectionValues

bool
ToJSValue(JSContext* aCx, BrowserFindDirection aArgument, JS::MutableHandle<JS::Value> aValue);


struct BrowserElementDownloadOptions : public DictionaryBase
{
  Optional<nsString> mFilename;
  Optional<nsString> mReferrer;

  BrowserElementDownloadOptions();

  explicit inline BrowserElementDownloadOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BrowserElementDownloadOptions(const BrowserElementDownloadOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const BrowserElementDownloadOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, BrowserElementDownloadOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastBrowserElementDownloadOptions : public BrowserElementDownloadOptions
{
  inline FastBrowserElementDownloadOptions()
    : BrowserElementDownloadOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct BrowserElementExecuteScriptOptions : public DictionaryBase
{
  Optional<nsString> mOrigin;
  Optional<nsString> mUrl;

  BrowserElementExecuteScriptOptions();

  explicit inline BrowserElementExecuteScriptOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BrowserElementExecuteScriptOptions(const BrowserElementExecuteScriptOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const BrowserElementExecuteScriptOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, BrowserElementExecuteScriptOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastBrowserElementExecuteScriptOptions : public BrowserElementExecuteScriptOptions
{
  inline FastBrowserElementExecuteScriptOptions()
    : BrowserElementExecuteScriptOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


class BrowserElementNextPaintEventCallback : public CallbackFunction
{
public:
  explicit inline BrowserElementNextPaintEventCallback(JSContext* aCx, JS::Handle<JSObject*> aCallback, nsIGlobalObject* aIncumbentGlobal)
    : CallbackFunction(aCx, aCallback, aIncumbentGlobal)
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline BrowserElementNextPaintEventCallback(CallbackFunction* aOther)
    : CallbackFunction(aOther)
  {
  }

  template <typename T>
  inline void
  Call(const T& thisVal, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JSCompartment* aCompartment = nullptr)
  {
    if (!aExecutionReason) {
      aExecutionReason = "BrowserElementNextPaintEventCallback";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aCompartment);
    if (!s.GetContext()) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return;
    }
    JS::Rooted<JS::Value> thisValJS(s.GetContext());
    if (!ToJSValue(s.GetContext(), thisVal, &thisValJS)) {
      aRv.Throw(NS_ERROR_FAILURE);
      return;
    }
    return Call(s.GetContext(), thisValJS, aRv);
  }

  inline void
  Call(ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JSCompartment* aCompartment = nullptr)
  {
    if (!aExecutionReason) {
      aExecutionReason = "BrowserElementNextPaintEventCallback";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aCompartment);
    if (!s.GetContext()) {
      aRv.Throw(NS_ERROR_UNEXPECTED);
      return;
    }
    return Call(s.GetContext(), JS::UndefinedHandleValue, aRv);
  }

  template <typename T>
  inline void
  Call(const T& thisVal, const char* aExecutionReason = nullptr)
  {
    IgnoredErrorResult rv;
    return Call(thisVal, rv, aExecutionReason);
  }

  inline void
  Call(const char* aExecutionReason = nullptr)
  {
    IgnoredErrorResult rv;
    return Call(rv, aExecutionReason, eReportExceptions, nullptr);
  }

  inline bool
  operator==(const BrowserElementNextPaintEventCallback& aOther) const
  {
    return CallbackFunction::operator==(aOther);
  }

private:
  void Call(JSContext* cx, JS::Handle<JS::Value> aThisVal, ErrorResult& aRv);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_BrowserElementBinding_h
