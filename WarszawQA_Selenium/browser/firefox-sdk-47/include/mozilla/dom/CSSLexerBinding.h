/* THIS FILE IS AUTOGENERATED FROM CSSLexer.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_CSSLexerBinding_h
#define mozilla_dom_CSSLexerBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

class CSSLexer;
struct CSSLexerAtoms;
struct CSSTokenAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class CSSTokenType : uint32_t {
  Whitespace,
  Comment,
  Ident,
  Function,
  At,
  Id,
  Hash,
  Number,
  Dimension,
  Percentage,
  String,
  Bad_string,
  Url,
  Bad_url,
  Symbol,
  Includes,
  Dashmatch,
  Beginsmatch,
  Endsmatch,
  Containsmatch,
  Urange,
  Htmlcomment,
  EndGuard_
};

namespace CSSTokenTypeValues {
extern const EnumEntry strings[23];
} // namespace CSSTokenTypeValues

bool
ToJSValue(JSContext* aCx, CSSTokenType aArgument, JS::MutableHandle<JS::Value> aValue);


struct CSSToken : public DictionaryBase
{
  uint32_t mEndOffset;
  Optional<bool> mHasSign;
  Optional<bool> mIsInteger;
  Optional<double> mNumber;
  uint32_t mStartOffset;
  Optional<nsString> mText;
  CSSTokenType mTokenType;

  CSSToken();

  explicit inline CSSToken(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline CSSToken(const CSSToken& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const CSSToken& aOther);

private:
  static bool
  InitIds(JSContext* cx, CSSTokenAtoms* atomsCache);
};

namespace binding_detail {
struct FastCSSToken : public CSSToken
{
  inline FastCSSToken()
    : CSSToken(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace CSSLexerBinding {

  typedef mozilla::dom::CSSLexer NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::CSSLexer* aObject, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace CSSLexerBinding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_CSSLexerBinding_h
